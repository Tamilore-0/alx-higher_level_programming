# 7-base_geometry.txt

========================
BaseGeometry class tests
========================

``BaseGeometry`` is a class that provides basic geometric operations.

::

    # Importing module
    >>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

    # Creating an instance of BaseGeometry
    >>> geometry_instance = BaseGeometry()

    # Testing area method (raises an exception)
    >>> geometry_instance.area()
    Traceback (most recent call last):
        ...
    Exception: area() is not implemented

    # Testing integer_validator with valid input
    >>> geometry_instance.integer_validator("width", 5)

    # Testing integer_validator with invalid type
    >>> geometry_instance.integer_validator("height", "invalid")
    Traceback (most recent call last):
        ...
    TypeError: height must be an integer

    # Testing integer_validator with invalid value (less than or equal to 0)
    >>> geometry_instance.integer_validator("length", 0)
    Traceback (most recent call last):
        ...
    ValueError: length must be greater than 0

    
    # Testing integer_validator with valid maximum value
    >>> geometry_instance.integer_validator("max_value", 999999999)

    # Testing integer_validator with invalid value (greater than 0 but not an integer)
    >>> geometry_instance.integer_validator("non_integer", 3.14)
    Traceback (most recent call last):
        ...
    TypeError: non_integer must be an integer

    # Testing integer_validator with invalid value (negative integer)
    >>> geometry_instance.integer_validator("negative_value", -5)
    Traceback (most recent call last):
        ...
    ValueError: negative_value must be greater than 0

    # Testing integer_validator with boolean
    >>> geometry_instance.integer_validator("hello", True)
    Traceback (most recent call last):
        ...
    TypeError: hello must be an integer

    # Testing integer_validator with sets
    >>> geometry_instance.integer_validator("hi", {1, 2})
    Traceback (most recent call last):
        ...
    TypeError: hi must be an integer

    # Testing integer_validator with tuple
    >>> geometry_instance.integer_validator("hey", (4, 6))
    Traceback (most recent call last):
        ...
    TypeError: hey must be an integer

    # Testing integer_validator with no arguments
    >>> geometry_instance.integer_validator()
    Traceback (most recent call last):
        ...
    TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

    # Testing integer_validator with incomplete parameters
    >>> geometry_instance.integer_validator("john")
    Traceback (most recent call last):
        ...
    TypeError: integer_validator() missing 1 required positional argument: 'value'

    # Testing integer_validator with incomplete parameters
    >>> geometry_instance.integer_validator(9)
    Traceback (most recent call last):
        ...
    TypeError: integer_validator() missing 1 required positional argument: 'value'

    # Testing integer_validator with lists
    >>> geometry_instance.integer_validator("hola", [1, 2, 3])
    Traceback (most recent call last):
        ...
    TypeError: hola must be an integer